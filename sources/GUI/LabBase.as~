import Tiles.*;
import Equipment.*;
import GUI.ButtonGroup;
import GUI.Thumbnails.*;

import mx.controls.*;
import mx.containers.Window;

class GUI.LabBase extends Graphics.Common.LabsPuppet
{
	//buttons
	private var btnDragging:Button;
	private var btnPiping:Button;
	private var btnElbows:Button;
	private var btnEraser:Button;
	private var btnControl:Button;
	private var btnMeasure:Button;
	private var btnHelp:Button;
	
	//button groups
	private var btnsScheme:ButtonGroup;
	private var btnsRuntime:ButtonGroup;
	
	//thumbnails panels
	private var equipment_thumbs:EquipmentThumbnailPanel;
	private var instruments_thumbs:InstrumentalThumbnailPanel;
	
	//auxiliaries
	// небольшой хак в данной версии, просто секундомер и барометр поместим в клипе Lab, и скроем.
	private var barometer:Graphics.Sensors.Barometer;
	private var stopwatch:Graphics.Misc.Stopwatch;
	
	//tiled plane and areas
	private var plane:TiledPlane;
	private var main_area      :TiledArea;
	private var restricted_area:TiledArea;
	private var work_area      :TiledArea;
	
	private var scheme:SchemeBase;
	private var app:LabApplicationBase;
	
// Инициализация 
	public function LabBase() {
		initTiledPlane();
		initTiledAreas();
		initButtons();
		initThumbnailPanels();
		initAdditionalActions();
		initScheme();
		initAux();
	}
	private function initTiledPlane() {
		this.plane = new TiledPlane(10, 20, 20);
	}
	private function initTiledAreas() {
		this.main_area = this.plane.createArea(0, 0, 51, 32);
		this.work_area = this.plane.createArea(0, 0, 40, 32);
		this.restricted_area = this.plane.createArea(40, 0, 2, 32);
	}
	private function initButtons() {
		initSchemeButtons();
		initRuntimeButtons();
		initControlButton();
	}
	private function initSchemeButtons() {
		this.btnDragging.onPress = function(){
			this._parent.unselectSchemeButtons();
			this.selected = false;
			this._parent.onPressDragging();
		}
		this.btnPiping.onPress = function(){
			this._parent.unselectSchemeButtons();
			this.selected = false;
			this._parent.onPressPiping();
		}
		this.btnElbows.onPress = function(){
			this._parent.unselectSchemeButtons();
			this.selected = false;
			this._parent.onPressElbows();
		}
		this.btnEraser.onPress = function(){
			this._parent.unselectSchemeButtons();
			this.selected = false;
			this._parent.onPressEraser();
		}
		this.btnHelp.onPress = function(){
			this._parent.onPressHelp();
		}
		this.btnsScheme = new ButtonGroup();
		var btnsScheme = new Array(
			this.btnDragging,
			this.btnPiping,
			this.btnElbows,
			this.btnEraser);
		this.btnsScheme.addFromArray(btnsScheme);
		this.btnsScheme.hide();
	}
	private function initRuntimeButtons() {
		this.btnMeasure.onPress = function() {
			this._parent.startMeasuring();
		}
		
		this.btnsRuntime = new ButtonGroup();
		var btnsRuntime = new Array(this.btnMeasure);
		this.btnsRuntime.addFromArray(btnsRuntime);
		this.btnsRuntime.hide();
	}
	private function initControlButton() {
		this.btnControl.onPress = function() {
			this._parent.onPressControl();
		}
	}
	private function initThumbnailPanels() {
		initEquipmentThumbnails();
		initInstrumentsThumbnails();
	}
	private function initEquipmentThumbnails() {
		var equipment_list = new Array(
   			"Tank", 
   			"Valve", 
   			"Heater",
			"Condenser",
   			"Chamber",
   			"Glass",
			"Boiler",
			"Flowmeter",
			"Compressor",
			"Receiver",
			"Nozzle");
		this.equipment_thumbs = new EquipmentThumbnailPanel(this, equipment_list, 43, 1, 8, 32);
	}
	private function initInstrumentsThumbnails() {
		var instruments_list = new Array(
			"Manometer",
			"TemperatureSensor",
			"Wattmeter");
		this.instruments_thumbs = new InstrumentalThumbnailPanel(this, instruments_list, 43, 1, 8, 31);
	}
	private function initAdditionalActions() {
		initPiping();
		initElbows();
		initInstruments();
	}
	private function initScheme():Void {
		this.scheme = new SchemeBase(this);
	}
	private function initAux():Void {
		hideClip(this.barometer);
		hideClip(this.stopwatch);
	}
		
// Proxies
	public function getScheme() {
		return this.scheme;
	}
	public function getPlane() {
		return this.plane;
	}
	public function getWorkArea() {
		return this.work_area;
	}
	public function getMainArea() {
		return this.main_area;
	}
	public function getBarometer() {
		return this.barometer;
	}
	public function bindApplication(app:LabApplicationBase) { 
		this.app = app;
	}
	public function getHelpTopic():String {
		return this.app.getHelpTopic();
	}
	public function unselectSchemeButtons() {
		this.btnsScheme.unselect();
	}
	public function showHint(hint:String):Void {
		_root.overlay.showHint(hint);
	}
	public function hideHint():Void {
		_root.overlay.hideHint();
	}
	
// Подготовка рабочей среды к этапу
	private function showAssemblingCommon() {
		this.equipment_thumbs.show();
		this.equipment_thumbs.enable();
		this.instruments_thumbs.hide();
		this.instruments_thumbs.disable();
		this.btnsScheme.show();
		this.btnsRuntime.hide();
		this.btnHelp._x = 140;
		this.btnControl.label = Strings.InstrumentsLabel;
	}
	public function showAssembling() {
		this.btnDragging.onPress();
		this.btnDragging.selected = true;
	}
	public function showDragging() {
		showAssemblingCommon();
		this.equipment_thumbs.enable();
	}
	public function showPiping() {
		showAssemblingCommon();
		this.equipment_thumbs.disable();
	}
	public function showElbows() {
		showAssemblingCommon();
		this.equipment_thumbs.disable();
	}
	public function showEraser() {
		showAssemblingCommon();
		this.equipment_thumbs.disable();
	}
	public function showInstruments() {
		this.equipment_thumbs.hide();
		this.equipment_thumbs.disable();
		this.instruments_thumbs.show();
		this.instruments_thumbs.enable();
		this.btnsScheme.hide();
		this.btnsRuntime.hide();
		this.btnHelp._x = 20;
		this.btnControl.label = Strings.TurnOnLabel;
	}
	public function showTurningOn() {
		this.instruments_thumbs.hide();
		this.btnControl.label = Strings.RunLabel;
	}
	public function showRunning() {
		this.btnControl.label = Strings.MeasureLabel;
		this.scheme.fillSchemeParams();
		showClip(this.barometer);
		showClip(this.stopwatch);
		showRunningSpecial();
		this.scheme.play();
	}
	private function showRunningSpecial() {
	}
	public function showMeasuring():Void {
		// OVERRIDABLE
	}
// Сообщения в начале каждого этапа	
	public function showAssemblingMsg() {
		Alert.show(Strings.AssemblingMsg, Strings.AssemblingCpt, Alert.OK, this);
	}
	public function showInstrumentsMsg() {
		Alert.show(Strings.InstrumentsMsg, Strings.InstrumentsCpt, Alert.OK);
	}
	public function showTurningOnMsg() {
		Alert.show(Strings.TurningOnMsg, Strings.TurningOnCpt, Alert.OK);
	}
	public function showRunningMsg() {
		Alert.show(Strings.RunningMsg, Strings.RunningCpt, Alert.OK);
	}
// Сообщения об окончании попыток	
	public function showAssemblingAttemptsOver() {
		Alert.show(Strings.AssemblingAttemptsOverMsg,  Strings.AssemblingAttemptsOverCpt, Alert.OK, null, function() { _root.lab.onAssemblingAttemptsOverOk(); });
	}
	public function showInstrumentsAttemptsOver() {
		Alert.show(Strings.InstrumentsAttemptsOverMsg, Strings.InstrumentsAttemptsOverCpt, Alert.OK, null, function() { _root.lab.onInstrumentsAttemptsOverOk(); });
	}
	public function showTurningOnAttemptsOver() {
		Alert.show(Strings.TurningOnAttemptsOverMsg,   Strings.TurningOnAttemptsOverCpt, Alert.OK, null, function() { _root.lab.onTurningOnAttemptsOverOk(); });
	}
// Сообщения об ошибках на этапах	
	public function showAssemblingError(msg:String) {
		Alert.show(msg, Strings.AssemblingErrorCpt,  Alert.OK, null, function() { _root.lab.onErrorOk(); });
	}
	public function showInstrumentsError(msg:String) {
		Alert.show(msg, Strings.InstrumentsErrorCpt, Alert.OK, null, function() { _root.lab.onErrorOk(); });
	}
	public function showTurningOnError(msg:String) {
		Alert.show(msg, Strings.TurningOnErrorCpt,   Alert.OK, null, function() { _root.lab.onErrorOk(); });
	}
	public function showServerError() {
		Alert.show(Strings.ServerErrorMsg, Strings.ServerErrorCpt, Alert.OK/*,  null, function() {  }*/);
	}
// Вопрос об окончании и сообщение об окончании	
	public function showFinishConfirm() {
		this.scheme.pause();
		var handler = function(evt_obj:Object) { 
			if (evt_obj.detail == Alert.YES) _root.lab.onFinishConfirmYes();
 			if (evt_obj.detail == Alert.NO)  _root.lab.onFinishConfirmNo();
		};
		Alert.yesLabel = Strings.YesLabel;
		Alert.noLabel  = Strings.NoLabel;
		Alert.show(Strings.FinishConfirmMsg, Strings.FinishConfirmCpt, Alert.YES | Alert.NO, null, handler);
	}
	
	public function showFinishMessage() {
		Alert.show(Strings.EndMsg, Strings.EndCpt, Alert.OK, this, function() { _root.onFinishMsgOk(); });
	}

// Complex event handlers
	public function onPressDragging() {
		this.app.onDraggingQuery();
		if(Config.Trace) trace("event: onPressDragging");
	}
	public function onPressPiping() {
		this.app.onPipingQuery();
		if(Config.Trace) trace("event: onPressPiping");
	}
	public function onPressElbows() {
		this.app.onElbowsQuery();
		if(Config.Trace) trace("event: onPressElbows");
	}
	public function onPressEraser() {
		this.app.onEraserQuery();
		if(Config.Trace) trace("event: onPressEraser");
	}
	public function onPressHelp() {
		if(Config.Trace) trace("event: onPressHelp");
		//show window
		var win:MovieClip = mx.managers.PopUpManager.createPopUp(this, Window, true, {closeButton:true, contentPath:"Helper.swf?" + getHelpTopic()});
		var w = 327;
		var h = 275;
		win.title = Strings.HelpCpt;
 		win.setSize(w, h);
		win.move((this._width - w)/2, (this._height - h)/2);
		var listenerObject:Object = new Object();
		listenerObject.click = function(evt:Object) {
   			evt.target.deletePopUp();
		};
		win.addEventListener("click", listenerObject);
	}
	public function onPressControl() {
		if(Config.Trace) trace("event: onPressControl");
		this.app.onNextStage();
	}
	public function onErrorOk() {
		if(Config.Trace) trace("event: onErrorOk");
		this.app.onErrorShown();
	}
	public function onHeaterBurned() {
		if(Config.Trace) trace("event: onHeaterBurned");
		Alert.show(Strings.HeaterBurnedMsg, Strings.HeaterBurnedCpt, Alert.OK, this, function(){ _root.app.onErrorShown(); });
	}
	public function onPressBurnedMsg() {
		if(Config.Trace) trace("event: onPressBurnedMsg");
	}
	public function onFinishConfirmYes() {
		if(Config.Trace) trace("event: onFinishConfirmYes");
		this.scheme.play();
	}
	public function onFinishConfirmNo() {
		if(Config.Trace) trace("event: onFinishConfimNo");
		showFinishMessage();
	}
	public function onFinishMsgOk() {
		// собсна все
	}
	
// Вспомогательные ф-ии
	public function getMousePoint():StagePoint {
		return new StagePoint(this._xmouse, this._ymouse);
	}
	
	public function getMousePointGlobal():StagePoint {
		var pt:Object = {x: this._xmouse, y: this._ymouse};
		localToGlobal(pt);
		return new StagePoint(pt.x, pt.y);
	}
	
// Рисование труб
	private var currentPipe;
	private var pipeX:Number;
	private var pipeY:Number;
	
	public function initPiping() {
		this.currentPipe = null;
		this.pipeX = 0;
		this.pipeY = 0;
	}
	public function beginPiping() {
		var start_point = this.plane.createPointFromStagePoint(this.getMousePoint());
		if(this.work_area.hasPoint(start_point)) {
			this.currentPipe = this.scheme.createEquipment("Pipe");
			this.currentPipe.moveToPoint(start_point);
			if(this.currentPipe.intersectedEquipment().length > 0)
				abortPiping();
			else {
				this.pipeX = start_point.tileX;
				this.pipeY = start_point.tileY;
			}
		}
	}
	public function doPiping() {
		if(this.currentPipe) {
			var point = this.plane.createPointFromStagePoint(getMousePoint());
			if(this.work_area.hasPoint(point)) {
				var deltaX = Math.abs(this.pipeX - point.tileX);
				var deltaY = Math.abs(this.pipeY - point.tileY);
				var aX = this.pipeX;
				var aY = this.pipeY;
				if (deltaY>=deltaX) {
					var bX = this.pipeX;
					var bY = point.tileY;
				} else {
					var bX = point.tileX;
					var bY = this.pipeY;
				}
				if (aX>bX || aY>bY) {
					var swap = bX;
					bX = aX;
					aX = swap;
					swap = bY;
					bY = aY;
					aY = swap;
				}
				this.currentPipe.move(aX, aY);
				this.currentPipe.resize(bX-aX+1, bY-aY+1);
								
				var ie = this.currentPipe.intersectedEquipment();
				if(ie.length > 0) {
					this.currentPipe.redColoured = true;
					this.currentPipe.putToFrontOf(ie);
				} else
					this.currentPipe.redColoured = false;
			} else
				abortPiping();
		}
	}
	private function endPiping() {
		if(this.currentPipe) {
			if(currentPipe.redColoured)
				abortPiping();
			else
				this.currentPipe = null;
		}
	}
	private function abortPiping() {
		this.scheme.deleteEquipment(this.currentPipe);
		this.currentPipe = null;
	}
	
// Рисование углов
	private var elbow;
	private function initElbows() {
		this.elbow = null;
	}
	private function moveElbowPointer() {
		var point = this.plane.createPointFromStagePoint(getMousePoint());
		var elbow_area = this.plane.createArea(point.tileX, point.tileY, 2, 2);
		if(this.work_area.hasArea(elbow_area))
		{
			if(!this.elbow)
				createCursor();
			this.elbow.moveToPoint(point);
					
			//check for overlapping
			var ie = this.elbow.intersectedEquipment();
			if(ie.length > 0)
				destroyCursor();
		} else if(this.elbow)
			destroyCursor();
	}
	private function createCursor() {
		this.elbow = this.scheme.createEquipment("Elbow");
		this.elbow.markAsCursor();
	}
	private function destroyCursor() {
		this.scheme.deleteEquipment(this.elbow);
		this.elbow = null;
	}
	private function doElbow() {
		if(this.elbow) {
			var new_elbow = this.scheme.createEquipment("Elbow");
			new_elbow.moveToPoint(this.elbow.getTiledArea().getLeftTopCorner());
			destroyCursor();
		}
	}

// Установка приборов
	private var name:String;
	private var isWorking:Boolean;
	private var stop_point:StagePoint;
	
	public function initInstruments() 	{
		this.name = "";
		this.isWorking = false;
	}
	public function startInstallTracking(name:String) {
		this.name = name;
		this.isWorking = true;
	}
	public function attemptToInstall(o:EquipmentBase) { 
		if(!this.isWorking) {
			if(o.getClip().hitTest(this.stop_point.x, this.stop_point.y, true)) {
				o.installInstrument(this.name);
				this.name = "";
			}
		}
	}
	public function stopInstallTracking() { 
		this.isWorking = false;
		//stop point is a stage point
		this.stop_point = getMousePointGlobal();
	}
}